 // Knock탭은 main탭이다.
#include <Keypad.h>            // 키패드 라이브러리, https://steemit.com/kr-newbie/@codingman/keypad
#include "LiquidCrystal_I2C.h"  // LCD 라이브러리
#include <Wire.h>               // LCD 라이브러리
#include <LedControl.h>        // 도트매트릭스 라이브러리, https://kocoafab.cc/tutorial/view/102
#include <SoftwareSerial.h>   // 초음파, 시리얼통신 라이브러리

LedControl lc=LedControl(12,11,10,4);    // 도트매트릭스, DIN 핀을 12번, CS 핀을 10번, CLK핀을 11번에 연결(DIN, CLK, CS, 연결할 도트 매트릭스의 개수) 
#define A1  { \ 
    {0, 1, 1, 1, 1, 1, 1, 0}, \
    {0, 0, 0, 1, 0, 0, 1, 0}, \
    {0, 0, 1, 1, 1, 0, 1, 0}, \
    {0, 0, 1, 0, 1, 1, 1, 0}, \
    {0, 0, 1, 0, 1, 0, 1, 0}, \
    {0, 0, 0, 0, 0, 0, 1, 0}, \
    {0, 1, 0, 0, 0, 0, 0, 0}, \
    {0, 1, 1, 1, 1, 1, 1, 0}  \
}                                           // 출력: 전 //0x7E,0x12,0x3E,0x2A,0x2A,0x02,0x40,0x7E,

#define A2  { \ 
    {0, 0, 0, 1, 0, 0, 1, 0}, \
    {0, 1, 1, 1, 1, 1, 1, 0}, \
    {0, 0, 1, 1, 1, 0, 1, 0}, \
    {0, 0, 1, 0, 1, 0, 1, 1}, \
    {0, 0, 1, 1, 1, 0, 1, 0}, \
    {0, 0, 0, 1, 0, 0, 1, 0}, \
    {0, 1, 1, 1, 1, 1, 1, 0}, \
    {0, 0, 0, 0, 0, 0, 1, 0}  \
}                                           // 출력: 화 //0x12,0x7E,0x3A,0x2B,0x3A,0x12,0x7E,0x02,

#define A3  { \ 
    {0, 1, 0, 0, 1, 0, 1, 0}, \
    {0, 1, 0, 0, 1, 0, 1, 0}, \
    {0, 1, 1, 1, 1, 0, 1, 0}, \
    {0, 1, 0, 0, 1, 1, 1, 0}, \
    {0, 1, 1, 1, 1, 0, 1, 0}, \
    {0, 0, 0, 0, 0, 0, 1, 0}, \
    {0, 1, 0, 0, 0, 0, 0, 0}, \
    {0, 1, 1, 1, 1, 1, 1, 0}  \
}                                           // 출력: 번 //0x4A,0x4A,0x7A,0x4E,0x7A,0x02,0x40,0x7E,

#define A4  { \ 
    {0, 0, 0, 1, 0, 0, 0, 0}, \
    {0, 1, 1, 1, 1, 1, 0, 0}, \
    {0, 0, 1, 1, 1, 0, 0, 0}, \
    {0, 0, 1, 0, 1, 0, 0, 0}, \
    {0, 0, 1, 1, 1, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 1, 0, 0, 0, 0}, \
    {0, 1, 1, 1, 1, 1, 0, 0}  \
}                                           // 출력: 호 //0x10,0x7C,0x38,0x28,0x38,0x00,0x10,0x7C,

#define A5  { \ 
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 1, 1, 1, 0, 0, 1, 0}, \
    {0, 1, 0, 1, 0, 1, 1, 0}, \
    {0, 1, 0, 1, 0, 0, 1, 0}, \
    {0, 1, 0, 1, 0, 0, 1, 0}, \
    {0, 1, 0, 1, 0, 0, 1, 0}, \
    {0, 1, 1, 1, 0, 0, 1, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}  \
}                                           // 출력: 01 //0x00,0x72,0x56,0x52,0x52,0x52,0x72,0x00,

#define A6  { \ 
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 1, 1, 1, 0, 0, 0, 0}, \
    {0, 1, 0, 1, 0, 0, 0, 0}, \
    {0, 1, 0, 1, 0, 0, 0, 0}, \
    {0, 1, 0, 1, 0, 1, 1, 0}, \
    {0, 1, 0, 1, 0, 0, 0, 0}, \
    {0, 1, 1, 1, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}  \
}                                           // 출력: 0- //0x00,0x70,0x50,0x50,0x56,0x50,0x70,0x00,

#define A7  { \ 
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 1, 1, 1, 0, 1, 1, 1}, \
    {0, 1, 0, 0, 0, 1, 0, 1}, \
    {0, 1, 1, 1, 0, 0, 0, 1}, \
    {0, 0, 0, 1, 0, 1, 1, 1}, \
    {0, 0, 0, 1, 0, 1, 0, 0}, \
    {0, 1, 1, 1, 0, 1, 1, 1}, \
    {0, 0, 0, 0, 0, 0, 0, 0}  \
}                                           // 출력: 52 //0x00,0x77,0x45,0x71,0x17,0x14,0x77,0x00,
#define A8  { \ 
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 1, 1, 1, 0, 1, 1, 1}, \
    {0, 1, 0, 1, 0, 0, 0, 1}, \
    {0, 1, 1, 1, 0, 1, 1, 1}, \
    {0, 1, 0, 1, 0, 0, 0, 1}, \
    {0, 1, 0, 1, 0, 0, 0, 1}, \
    {0, 1, 1, 1, 0, 1, 1, 1}, \
    {0, 0, 0, 0, 0, 0, 0, 0}  \
}                                           // 출력: 83 //0x00,0x77,0x51,0x77,0x51,0x51,0x77,0x00,

#define A9  { \ 
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 1, 1, 1, 0}, \
    {0, 0, 0, 0, 0, 0, 1, 0}, \
    {0, 0, 0, 0, 1, 1, 1, 0}, \
    {0, 1, 1, 0, 0, 0, 1, 0}, \
    {0, 0, 0, 0, 0, 0, 1, 0}, \
    {0, 0, 0, 0, 1, 1, 1, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}  \
}                                           // 출력: -3 //0x00,0x0E,0x02,0x0E,0x62,0x02,0x0E,0x00,

#define A10  { \ 
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {1, 1, 1, 0, 1, 1, 1, 0}, \
    {1, 0, 0, 0, 1, 0, 1, 0}, \
    {1, 1, 1, 0, 1, 1, 1, 0}, \
    {0, 0, 1, 0, 1, 0, 1, 0}, \
    {0, 0, 1, 0, 1, 0, 1, 0}, \
    {1, 1, 1, 0, 1, 1, 1, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}  \
}                                           // 출력: 58 //0x00,0xEE,0x8A,0xEE,0x2A,0x2A,0xEE,0x00,

#define A11  { \ 
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {1, 1, 1, 0, 0, 0, 0, 0}, \
    {1, 0, 0, 0, 0, 0, 0, 0}, \
    {1, 1, 1, 0, 0, 0, 0, 0}, \
    {0, 0, 1, 0, 0, 0, 0, 0}, \
    {0, 0, 1, 0, 0, 0, 0, 0}, \
    {1, 1, 1, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}  \
}                                           // 출력: 5  //0x00,0xE0,0x80,0xE0,0x20,0x20,0xE0,0x00,

#define A12  { \ 
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}, \
    {0, 0, 0, 0, 0, 0, 0, 0}  \
}                                           // 출력: null
byte patterns1[4][8][8] = { A1, A2, A3, A4 };   // 위에서 정의한 LED 모양을 patterns1에[연결할 도트 매트릭스의 개수, 행(가로 줄), 열(세로 줄)] 입력해 주기
byte patterns2[4][8][8] = { A5, A6, A7, A8 }; 
byte patterns3[4][8][8] = { A9, A10, A11, A12};
/*--------------------위: 도트메트릭스, 아래: 키패드----------------------*/
const byte rows = 4;                 // 키패드 가로줄
const byte cols = 4;                 // 키패드 세로줄
byte rowPins[rows] = {9,8,7,6};      // 키패드 가로줄
byte colPins[cols] = {5,4,3,2};      // 키패드 세로줄
char keys[rows][cols] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, rows, cols);     // 키패드(키값배열, 열(세로줄)핀, 행(가로줄)핀, 열수, 행수)
/*--------------------위: 키패드, 아래: 블루투스--------------------------*/
int Tx=2;                                     // 블루투스 Tx (보내는핀 설정), http://deneb21.tistory.com/267
int Rx=3;                                     // 블루투스 Rx (받는핀 설정)
SoftwareSerial mySerial(Tx, Rx);            // 시리얼 통신을 위한 객체선언
String myString="";                           // 받는 문자열
/*--------------------위: 블루투스, 아래: LCD 디스플레이------------------*/
LiquidCrystal_I2C lcd = LiquidCrystal_I2C(0x27,16,2);     // 16 문자 및 2 라인 디스플레이의 경우 LCD 주소를 0x27로 설정하십시오.()????
/*LiquidCrystal_I2C lcd(0x27,16,2);    // 객체선언, 0x27(주소)의 가로16 세로2의 LCD를 제어선의 연결핀에 설정함(이거도됨)(아날로그 쓰므로 핀모듈설정 불필요)
int SDA = A4;                        // 초음파 센서 제조단계에서 이미 예약되어 있는거라 선언 불필요
int SCL = A5;                        // 초음파 센서 제조단계에서 이미 예약되어 있는거라 선언 불필요   */
const unsigned int TRIGGER = 6;      // 초음파 발신(상수에 락걸어 2바이트씩 양수로만 저장) 
const unsigned int ECHO    = A0;     // 초음파 수신(상수에 락걸어 2바이트씩 양수로만 저장)
const float SENSOR_PARAMETER = 32;   // 출력이 너무작게 나오면 이값을 키우고, 출력이 크면 이값을 줄여라(부동수소점 수에 락걸어 4바이트씩 소수점수 저장)

/*-----------------------------가독성 향상을 위한 주석--------------------------------*/
void setup() {
  Serial.begin(115200);             // 컴퓨터에 데이터 전송(속도112500)
  while(!Serial);                   // 0이외의 값이 넘어올때까지(시리얼 통신받을때 까지)기다리겠다  
//  mySerial.begin(115200);            // 블루투스에 데이터 전송(속도112500)
  pinMode(TRIGGER,OUTPUT);           // 초음파의 TRIGGER는 데이터 송신용임을 선언
  pinMode(ECHO,INPUT);               // 초음파의 ECHO는 데이터 발신용임을 선언
  Wire.begin();                 // 화면에 나오게 하기
  lcd.begin();                  // 가로16개, 세로2개를 초기화 
  lcd.home();                   // 커서를 원점으로 보냄
  lcd.clear();                  // 액정 모두삭제, 원점이동 
  lcd.print("Welcome to LUX");  // 화면에 "방문 환영"출력
  lcd.setCursor(0,1);           // 커서설정(다음줄로 커서를 내려라)
  lcd.print("Corp.");           // 화면에 "럭스사(社)"출력 
  delay(3000);                  // 딜레이 3초 
  for(int i=0; i<4; i++){            // 도트 매트릭스 4번반복
    lc.shutdown(i,false);            // 디스플레이 초기화 및 절전취소
    lc.setIntensity(i,1);            // 도트 매트릭스 밝기 (매트릭스 번호, 밝기) 1~15
    lc.clearDisplay(i);              // 도트 매트락스의 led 를 전체끔(초기화) 함수
  }
}
/*-----------------------------가독성 향상을 위한 주석--------------------------------*/
void loop() {
  LCD();                   // LCD디스플레이어
  UITRASONIC();            // 초음파 & 함수 내부에 DOTMATRIX()도 연동됨
  DOTMATRIX();
//  BLUETOOTH();             // 블루투스
  KEYPAD();                // 키패드
}
/*-----------------------------가독성 향상을 위한 주석--------------------------------*/
void LCD(){                     // LCD  
//  delay(500);                   // 딜레이 0.5초  
  lcd.clear();                  // 액정 모두삭제, 원점이동  
  lcd.print("Waiting for");
  lcd.setCursor(0,1);           // 커서설정(다음줄로 커서를 내려라)
  lcd.print("input");
  for(int i=0; i<5; i++){       // 5번 반복
    delay(200);                 // 딜레이 0.5초
    lcd.print(".");
  }
}
/*-----------------------------가독성 향상을 위한 주석--------------------------------*/
void UITRASONIC(){                               // 초음파
  unsigned int duration = 0;                     // 시간
  unsigned int distance = 0;                     // 거리
//  digitalWrite(TRIGGER, LOW);                    // 초음파 발사중지
//  delayMicroseconds(1000);                       // 용이한 수신을 위해 딜레이 0.001초 
  digitalWrite(TRIGGER, HIGH);                   // 초음파 발사
  delayMicroseconds(1000);                       // 용이한 수신을 위해 딜레이 0.001초 줌
  digitalWrite(TRIGGER, LOW);                    // 초음파 발사중지
  duration = pulseIn(ECHO, HIGH);                // 펄스가 high에서 low로 바뀔때 딜레이를 리턴해주는 함수
  distance = (duration / 2)/(SENSOR_PARAMETER);  // 거리=(속력/2)/시간 , 속력/2 하는이유: 초음파발신후 송신하기에 2배의 값을얻음 
  Serial.print(distance);                       // 거리
  Serial.println("cm");                         // 값조절 단위[cm]
  delay(200);                                    // 딜레이 0.2초
  if (distance < 30){                            // distance(거리) 가 50보다 작으면
    DOTMATRIX();                                 // 도트매트릭스 
    delay(500);                                  // 딜레이 0.5초
  }
  else{}
}
/*-----------------------------가독성 향상을 위한 주석--------------------------------*/
void DOTMATRIX(){                 // 도트매트릭스
  int pattern1 = 4;               // 패턴
  int pattern2 = 4;               // 패턴
  int row, col, i;                // 행(가로 줄), 열(세로 줄), i
 
  for(i = 0; i < 4; i++){                           // 총 4글자 반복, 도트매트릭스에 patterns1 나오게하기
    for (row = 0; row < 8; row++) {                 // row 출력
      for (col=0; col < 8; col++){                  // col 출력
        if (patterns1[i][7 - col][7 - row] == 1)    // 위의 배열에서 1일때 해당되는 위치 불빛 켜주기([i], [열(세로 줄)], [행(가로 줄)])
          lc.setLed(i, col, row, true); 
            else                                    // 위 배열에서 0일때 해당되는 위치 불빛 꺼주기
          lc.setLed(i, col, row, false); 
       }
     }
        delay(500);                        // 딜레이 0.5초   
  }
  for(int i = 0; i < 4; i++){              // 3번 반복, LED 전체 꺼주기 
    lc.clearDisplay(i);                    // 화면 지우기
  }                                    
  delay(500);                              // 딜레기 0.5초    
/*--------가독성 향상을 위한 주석----------------*/
  for(i = 0; i < 4; i++){                           // 총 4글자 반복, 도트매트릭스에 patterns2 나오게하기
    for (row = 0; row < 8; row++) {                 // row 출력
      for (col=0; col < 8; col++){                  // col 출력
        if (patterns2[i][7 - col][7 - row] == 1)    // 위의 배열에서 1일때 해당되는 위치 불빛 켜주기([i], [열(세로 줄)], [행(가로 줄)])
          lc.setLed(i, col, row, true); 
            else                                    // 위 배열에서 0일때 해당되는 위치 불빛 꺼주기
          lc.setLed(i, col, row, false); 
       }
     }
        delay(500);                        // 딜레이 0.5초   
  }
  for(int i = 0; i < 4; i++){              // 3번 반복, LED 전체 꺼주기 
    lc.clearDisplay(i);                    // 화면 지우기
  }                                    
  delay(500);                              // 딜레기 0.5초    
/*--------가독성 향상을 위한 주석----------------*/
  for(i = 0; i < 4; i++){                           // 총 4글자 반복, 도트매트릭스에 patterns3 나오게하기
    for (row = 0; row < 8; row++) {                 // row 출력
      for (col=0; col < 8; col++){                  // col 출력
        if (patterns3[i][7 - col][7 - row] == 1)    // 위의 배열에서 1일때 해당되는 위치 불빛 켜주기([i], [열(세로 줄)], [행(가로 줄)])
          lc.setLed(i, col, row, true); 
            else                                    // 위 배열에서 0일때 해당되는 위치 불빛 꺼주기
          lc.setLed(i, col, row, false); 
       }
     }
        delay(500);                        // 딜레이 0.5초   
  }
  for(int i = 0; i < 4; i++){              // 3번 반복, LED 전체 꺼주기 
    lc.clearDisplay(i);                    // 화면 지우기
  }                                    
  delay(500);                              // 딜레기 0.5초    
}
/*-----------------------------가독성 향상을 위한 주석--------------------------------*/
void BLUETOOTH(){                         // 블루
  while(mySerial.available())             // mySerial에 전송된 값이 있으면
  {
    char myChar = (char)mySerial.read();  // mySerial int 값을 char 형식으로 변환
    myString+=myChar;                     // 수신되는 문자를 myString에 모두 붙임 (1바이트씩 전송되는 것을 연결)
    delay(5);                             // 수신 문자열 끊김 방지
  }
  if(!myString.equals(""))                // myString 값이 있다면
  {
    Serial.println("input value: "+myString);  // 시리얼모니터에 myString값 출력
    myString="";                                // myString 변수값 초기화
  }
}
/*-----------------------------가독성 향상을 위한 주석--------------------------------*/
void KEYPAD(){                  // 키패드
  char key = keypad.getKey();
  if (key != NO_KEY){           //키값이 눌렀는지 확인문
    Serial.println(key);
  }
}
